"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[867],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=o,f=d["".concat(i,".").concat(h)]||d[h]||p[h]||a;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4199:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],l={sidebar_position:1},i="Controllers",c={unversionedId:"controllers/how_to_use_controllers",id:"controllers/how_to_use_controllers",title:"Controllers",description:"Controllers are responsible for controlling the way that a user interacts with your server-side application. Steward provides a Controller that your own Controllers can extend, which provides a few key benefits for you to leverage.",source:"@site/docs/controllers/how_to_use_controllers.md",sourceDirName:"controllers",slug:"/controllers/how_to_use_controllers",permalink:"/steward/docs/controllers/how_to_use_controllers",editUrl:"https://github.com/pyrestudios/steward/tree/main/docs/controllers/how_to_use_controllers.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"CacheContainer",permalink:"/steward/docs/container/cache_container"},next:{title:"What is the App",permalink:"/steward/docs/app/what-is-the-app"}},u=[{value:"A note on async",id:"a-note-on-async",children:[],level:2},{value:"Annotations for HTTP Verbs",id:"annotations-for-http-verbs",children:[],level:2},{value:"The View function",id:"the-view-function",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"controllers"},"Controllers"),(0,a.kt)("p",null,"Controllers are responsible for controlling the way that a user interacts with your server-side application. Steward provides a Controller that your own Controllers can extend, which provides a few key benefits for you to leverage."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class SampleController extends Controller {\n  @Injectable('UserService')\n  late UserService userService;\n  \n  @Get('/version')\n  version(_) => 'v1.0';\n\n  @Get('/show')\n  Response show(Request request) => view('main_template');\n  \n  @Get('/users')\n  Response users => UserService.getUsers();\n}\n")),(0,a.kt)("p",null,"The controller in this example is a SampleController that extends the Controller provided by Steward. Additionally, this controller specifies that a UserService should be injected from the DI container, a GET handler to '/version' that returns 'v1.0', a GET handler to '/show' that renders a view, and a GET handler to '/users' that gets data from the injected UserService. This probably isn't the best example of a real-life controller, but it showcases a lot of functionality."),(0,a.kt)("h2",{id:"a-note-on-async"},"A note on async"),(0,a.kt)("p",null,"Controller functions can be either sync or async! It's entirely up to you and Steward supports both!"),(0,a.kt)("p",null,"Controller methods can be set up to return a ",(0,a.kt)("inlineCode",{parentName:"p"},"Response")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Response>"),". Generally, most controller methods tend to become async over time and for that reason, we encourage using async as a default but if you find that its overly complicating something (say returning a static string to indicate a healthcheck or a version number perhaps)."),(0,a.kt)("h2",{id:"annotations-for-http-verbs"},"Annotations for HTTP Verbs"),(0,a.kt)("p",null,"Controllers are reflectively mounted using annotations. Specifically, Steward provides a list of HTTP verbs as annotations that can be used to decorate method handlers. Note: Mounting a controller to your router without any HTTP Verb annotations will generate no routes."),(0,a.kt)("p",null,"These annotations also take in an optional list of middleware to run against that method. A great example might be to guard specific routes with authentication middleware. To do so at the controller level, we can modify our above example like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class SampleController extends Controller {\n  @Injectable('UserService')\n  late UserService userService;\n  \n  @Get('/version')\n  version(_) => 'v1.0';\n\n  @Get('/show', [userHasAccessMiddleware])\n  Response show(Request request) => view('main_template');\n  \n  @Get('/users', [userHasAccessMiddleware])\n  Response users => UserService.getUsers();\n}\n")),(0,a.kt)("p",null,"This assumes that you have a middleware named ",(0,a.kt)("inlineCode",{parentName:"p"},"userHasAccessMiddleware")," in scope of this file. You'll want to substitute the name of your own middleware instead of using that one."),(0,a.kt)("h2",{id:"the-view-function"},"The View function"),(0,a.kt)("p",null,"The view function is provided by the Controller class. It can be used to generate a response with an HTML body from one of the mustache templates in your views directory."),(0,a.kt)("p",null,"Assuming we have a view in a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"all_records"),", we could write:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class MyController extends Controller {\n\n  @Get('/index')\n  Response showItems() {\n    // any variables needed by the template can be passed in to varMap.\n    return view('all_records', varMap: {\n      'name': 'Steward'\n    });\n  }\n}\n\n")))}d.isMDXComponent=!0}}]);