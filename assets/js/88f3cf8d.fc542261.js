"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[670],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),d=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=d(r),m=a,f=p["".concat(l,".").concat(m)]||p[m]||c[m]||o;return r?n.createElement(f,i(i({ref:t},s),{},{components:r})):n.createElement(f,i({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var d=2;d<o;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2218:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var n=r(3117),a=(r(7294),r(3905));const o={sidebar_position:4},i="Middleware",u={unversionedId:"router/middleware",id:"router/middleware",title:"Middleware",description:"Steward's router has support for Middleware functions that are executed before the route handler that they are attached to. The middleware function typedef is like so:",source:"@site/docs/router/middleware.md",sourceDirName:"router",slug:"/router/middleware",permalink:"/steward/docs/router/middleware",draft:!1,editUrl:"https://github.com/pyrestudios/steward/tree/main/docs/router/middleware.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"The Router",permalink:"/steward/docs/router/routers"},next:{title:"Static Assets",permalink:"/steward/docs/router/static_assets"}},l={},d=[{value:"Out of the Box Middleware",id:"out-of-the-box-middleware",level:2}],s={toc:d};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"middleware"},"Middleware"),(0,a.kt)("p",null,"Steward's router has support for Middleware functions that are executed before the route handler that they are attached to. The middleware function typedef is like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"typedef MiddlewareFunc = Future<Response> Function(Request) Function(\n    Future<Response> Function(Request) nextHandler);\n")),(0,a.kt)("p",null,"While this may look complex, the actual implementation of a custom middleware is fairly straightforward. We can look to the middlewares that Steward ships for an example of how we can structure our own middleware. Let's take a look at the ",(0,a.kt)("inlineCode",{parentName:"p"},"RequestLogger")," middleware:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"/// An extremely simple Middleware function that prints the incoming request URI\n/// helpful for debugging and in understanding how middleware functions are structured\nFuture<Response> Function(Request) RequestLogger(\n    Future<Response> Function(Request) next) {\n  return (Request request) {\n    print('Incoming Request: ${request.request.uri}');\n    return next(request);\n  };\n}\n")),(0,a.kt)("p",null,"This ",(0,a.kt)("inlineCode",{parentName:"p"},"RequestLogger")," returns a function that takes in a request and then returns the result of calling ",(0,a.kt)("inlineCode",{parentName:"p"},"next")," with that ",(0,a.kt)("inlineCode",{parentName:"p"},"request"),". Generally, your middleware will always return a function and that function with return ",(0,a.kt)("inlineCode",{parentName:"p"},"next(request)"),". This keeps the middleware chain going, but should you want to terminate it early (for example, if a user is unauthorized), you can always return a Response instead of returning ",(0,a.kt)("inlineCode",{parentName:"p"},"next(request)"),"."),(0,a.kt)("h2",{id:"out-of-the-box-middleware"},"Out of the Box Middleware"),(0,a.kt)("p",null,"Steward ships with some middleware out of the box. Namely, you have:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RequestLogger - used for logging incoming requests to STDOUT"),(0,a.kt)("li",{parentName:"ul"},"CORSMiddleware - used for configuring CORS headers")),(0,a.kt)("p",null,"Middleware ships under a different module and should be imported like so: ",(0,a.kt)("inlineCode",{parentName:"p"},"import 'package:steward/middleware/cors_middleware.dart';")))}c.isMDXComponent=!0}}]);