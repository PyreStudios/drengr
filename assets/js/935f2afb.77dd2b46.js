"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introducing Steward","href":"/steward/docs/intro","docId":"intro"},{"type":"category","label":"Quickstart","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation and Requirements","href":"/steward/docs/quickstart/installation-and-requirements","docId":"quickstart/installation-and-requirements"}]},{"type":"category","label":"Router","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Requests","href":"/steward/docs/router/requests","docId":"router/requests"},{"type":"link","label":"Responses","href":"/steward/docs/router/responses","docId":"router/responses"},{"type":"link","label":"The Router","href":"/steward/docs/router/routers","docId":"router/routers"}]},{"type":"category","label":"Container","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What is a Container","href":"/steward/docs/container/what_is_a_container","docId":"container/what_is_a_container"},{"type":"link","label":"CacheContainer","href":"/steward/docs/container/cache_container","docId":"container/cache_container"}]},{"type":"category","label":"Controllers","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Controllers","href":"/steward/docs/controllers/how_to_use_controllers","docId":"controllers/how_to_use_controllers"}]},{"type":"category","label":"App","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What is the App","href":"/steward/docs/app/what-is-the-app","docId":"app/what-is-the-app"},{"type":"link","label":"Configuration","href":"/steward/docs/app/configuration","docId":"app/configuration"},{"type":"link","label":"Views","href":"/steward/docs/app/views","docId":"app/views"}]}]},"docs":{"app/configuration":{"id":"app/configuration","title":"Configuration","description":"The app is responsible for parsing your Steward configuration file and binding that to the DI container. Nested structures will be flattened when generating keys. This means a config YAML like this:","sidebar":"tutorialSidebar"},"app/views":{"id":"app/views","title":"Views","description":"The app is responsible for many things, but one important task that it accomplishes is registering the views for your application.","sidebar":"tutorialSidebar"},"app/what-is-the-app":{"id":"app/what-is-the-app","title":"What is the App","description":"The App class takes care of tying up some odds and ends that many projects may want. For example, registering view files (html/mustache templates) so that they can be used, reading and parsing your config.yml, and -- in the future -- many more items. You don\'t have to use the App and can get on just fine with just the Router and Container, but if you want these \\"advanced\\" features from the framework, then you probably want to use the app.","sidebar":"tutorialSidebar"},"container/cache_container":{"id":"container/cache_container","title":"CacheContainer","description":"The CacheContainer is the default container implementation that ships with Steward. You can access the generated CacheContainer on the Router by calling myRouter.container, provided myRouter is the name of the variable holding your router.","sidebar":"tutorialSidebar"},"container/what_is_a_container":{"id":"container/what_is_a_container","title":"What is a Container","description":"A container, in the Steward sense, is simply a box that things can be stored in and retrieved from. In our case, we use our Container as the foundation for our dependency injection framework. The container should be one of the simpest things about Steward. You can put key-value pairs into it, and you can select values by their key.","sidebar":"tutorialSidebar"},"controllers/how_to_use_controllers":{"id":"controllers/how_to_use_controllers","title":"Controllers","description":"Controllers are responsible for controlling the way that a user interacts with your server-side application. Steward provides a Controller that your own Controllers can extend, which provides a few key benefits for you to leverage.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introducing Steward","description":"Steward\'s goal is to be a helpful framework for building server-side experiences with Dart.","sidebar":"tutorialSidebar"},"quickstart/installation-and-requirements":{"id":"quickstart/installation-and-requirements","title":"Installation and Requirements","description":"Steward is only supported on Dart 2.15.0+.","sidebar":"tutorialSidebar"},"router/requests":{"id":"router/requests","title":"Requests","description":"Steward handles incoming HTTP requests by mapping them to a Request class.","sidebar":"tutorialSidebar"},"router/responses":{"id":"router/responses","title":"Responses","description":"To write data in response to an HTTP Request, Steward uses Responses. The Response class has many constructors to help you model your Response accurately and expressively in code. For example, if you wanted to create a Response to model a status code 200 response with a body of \\"Hello World\\", you could write Response.Ok(\\"Hello World\\").","sidebar":"tutorialSidebar"},"router/routers":{"id":"router/routers","title":"The Router","description":"The Router handles setting up request bindings and writing Steward responses to the actual HTTP response.","sidebar":"tutorialSidebar"}}}')}}]);